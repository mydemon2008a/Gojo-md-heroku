const axios = require('axios');
const { cmd } = require('../lib/command');
const { fetchJson } = require('../lib/functions');
const config = require('../settings');

const searchCache = new Map();       // chatId -> search results
const qualityCache = new Map();      // chatId -> { poster, title, links }

/* .baiscopes <keyword> */
cmd({
    pattern: 'baiscopes',
    react: 'üîé',
    category: 'movie',
    desc: 'Baiscopes.lk movie search',
    use: '.baiscopes <keyword>',
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    if (!q) return reply('*‡∂ã‡∂Ø‡∑è‡∑Ñ‡∂ª‡∂´‡∂∫‡∂ö‡∑ä ‡∂Ω‡∑ô‡∑É ‚Äú.baiscopes fast x‚Äù ‡∑Ä‡∑ê‡∂±‡∑í‡∑Ä‡∂ö‡∑ä ‡∂ß‡∂∫‡∑í‡∂¥‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*');
    const res = await fetchJson(`https://darksadas-yt-baiscope-search.vercel.app/?query=${encodeURIComponent(q)}`);
    if (!res?.data?.length) {
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } });
        return conn.sendMessage(from, { text: '*‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω‡∂∫‡∂ö‡∑ä ‡∂±‡∑ê‡∑Ñ‡∑ê ‚ùå*' }, { quoted: mek });
    }

    searchCache.set(from, res.data);
    let txt = `*_üìΩÔ∏è BAISCOPES MOVIE SEARCH RESULT üé¨_* \n\n*üîç ‡∑É‡∑ô‡∑Ä‡∑î‡∂∏:* ${q}\n\n`;
    res.data.forEach((v, i) => txt += `${i + 1}. ${v.title}\n`);
    txt += '\nüëâ *‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª* `.bdl <number>` *‡∂Ω‡∑ô‡∑É ‡∂∫‡∑ú‡∂∏‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±*';

    await conn.sendMessage(from, { text: txt, footer: config.FOOTER }, { quoted: mek });
});

/* .bdl <number> */
cmd({
    pattern: 'bdl',
    react: 'üé•',
    desc: 'movie downloader',
    use: '.bdl <number>',
    filename: __filename
}, async (conn, m, mek, { from, q, reply }) => {
    const idx = parseInt(q.trim()) - 1;
    const list = searchCache.get(from);
    if (!list || isNaN(idx) || !list[idx]) return reply('*‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫‡∂ö‡∑ä!*');

    const { link: infoUrl, img: poster } = list[idx];
    const info = await fetchJson(`https://darksadas-yt-baiscope-info.vercel.app/?url=${infoUrl}&apikey=pramashi`);
    if (!info?.data) return reply('*‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂Ω‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä!*');

    const d = info.data;
    qualityCache.set(from, { poster, title: d.title, links: d.dl_links });

    const caption = [
        `*üé¨ ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫:* _${d.title || 'N/A'}_`,
        `*üìÜ ‡∂±‡∑í‡∂ö‡∑î‡∂≠‡∑ä ‡∑Ä‡∑ì‡∂∏‡∑ö ‡∂Ø‡∑í‡∂±‡∂∫:* _${d.date || 'N/A'}_`,
        `*‚≠ê IMDb:* _${d.imdb || 'N/A'}_`,
        `*üïê ‡∂∞‡∑è‡∑Ä‡∂± ‡∂ö‡∑è‡∂Ω‡∂∫:* _${d.runtime || 'N/A'}_`,
        `*üàÇÔ∏è ‡∂ã‡∂¥‡∑É‡∑í‡∂ª‡∑ê‡∑É‡∑í ‡∂ö‡∂Ω‡∑ö:* _${d.subtitle_author || 'N/A'}_`,
        `*üé≠ ‡∂ö‡∑è‡∂´‡∑ä‡∂©:* ${Array.isArray(d.genres) ? d.genres.join(', ') : 'N/A'}`
    ].join('\n');

    let txt = `${caption}\n\n*üì• ‡∂Ω‡∑ê‡∂∂‡∑í‡∂∫ ‡∑Ñ‡∑ê‡∂ö‡∑í ‡∂ú‡∑î‡∂´‡∑è‡∂≠‡∑ä‡∂∏‡∂≠‡∑è‡∑Ä‡∂±‡∑ä:* \n`;
    d.dl_links.forEach((v, i) => txt += `${i + 1}. ${v.quality} - ${v.size}\n`);
    txt += '\nüëâ *‡∂¥‡∑Ñ‡∂Ω‡∑í‡∂±‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±:* `.cdl <number>`';

    await conn.sendMessage(from, {
        image: { url: poster.replace('-150x150', '') },
        caption: txt,
        footer: config.FOOTER
    }, { quoted: mek });
});

/* .cdl <number> */
cmd({
    pattern: 'cdl',
    react: '‚¨áÔ∏è',
    dontAddCommandList: true,
    use: '.cdl <number>',
    filename: __filename
}, async (conn, mek, m, { from, q, reply }) => {
    const idx = parseInt(q.trim()) - 1;
    const cache = qualityCache.get(from);
    if (!cache || isNaN(idx) || !cache.links[idx]) return reply('*‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫!*');

    const { poster, title, links } = cache;
    const driveUrl = links[idx].link;

    try {
        const dl = await fetchJson(`https://darksadas-yt-baiscope-dl.vercel.app/?url=${driveUrl}&apikey=pramashi`);
        const gDrive = dl?.data?.dl_link?.trim();
        if (!gDrive?.startsWith('https://drive.baiscopeslk')) return reply('*‡∂Ö‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂Ω‡∑í‡∂Ç‡∂ö‡∑î‡∑Ä‡∂ö‡∑í!*');

        await conn.sendMessage(from, { react: { text: '‚¨ÜÔ∏è', key: mek.key } });
        await conn.sendMessage(from, { text: '*üì§ ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∂∫‡∑Ä‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑í‡∂∫‡∑í...*' });

        await conn.sendMessage(config.JID || from, {
            document: { url: gDrive },
            caption: `*üé¨ ‡∂±‡∂∏:* ${title}\n`,
            mimetype: 'video/mp4',
            jpegThumbnail: await (await axios.get(poster, { responseType: 'arraybuffer' })).data,
            fileName: `${title}.mp4`
        });

        await conn.sendMessage(from, { react: { text: '‚úîÔ∏è', key: mek.key } });
        await conn.sendMessage(from, { text: '*üéâ ‡∂†‡∑í‡∂≠‡∑ä‚Äç‡∂ª‡∂¥‡∂ß‡∂∫ ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂ë‡∑Ä‡∑í‡∂±‡∑í!*' }, { quoted: mek });
        qualityCache.delete(from);
    } catch (e) {
        console.error(e);
        reply('*üö® ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í‡∑Ä‡∑í‡∂∫, ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!*');
    }
});